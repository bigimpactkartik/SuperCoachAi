/*
  # Minimal Schema Migration - Exact Fields Only

  Creates tables with ONLY the fields specified:
  - coaches: id, name, email, phone
  - conversations: id, student_id, role, message, timestamp
  - course_versions: id, course_id, version_number, updated_at, is_active
  - courses: id, title, coach_id
  - enrollments: id, student_id, course_id, enrolled_at
  - modules: id, course_id, title
  - promises: id, student_id, task_id, promise_datetime, due_date, checked, created_at
  - students: id, name, telegram_id, phone_number, about, email
  - task_assignments: id, student_id, task_id, status, updated_at, due_date
  - tasks: id, course_id, title, deadline, module_id, timetocomplete
*/

-- Drop existing tables if they exist
DROP TABLE IF EXISTS task_assignments CASCADE;
DROP TABLE IF EXISTS promises CASCADE;
DROP TABLE IF EXISTS tasks CASCADE;
DROP TABLE IF EXISTS enrollments CASCADE;
DROP TABLE IF EXISTS conversations CASCADE;
DROP TABLE IF EXISTS modules CASCADE;
DROP TABLE IF EXISTS course_versions CASCADE;
DROP TABLE IF EXISTS courses CASCADE;
DROP TABLE IF EXISTS students CASCADE;
DROP TABLE IF EXISTS coaches CASCADE;

-- Drop existing types if they exist
DROP TYPE IF EXISTS task_status CASCADE;

-- Create task_status enum (only if it doesn't exist)
DO $$ BEGIN
    CREATE TYPE task_status AS ENUM ('pending', 'completed');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- coaches table: id, name, email, phone
CREATE TABLE coaches (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name text NOT NULL,
  email text NOT NULL,
  phone text
);

-- students table: id, name, telegram_id, phone_number, about, email
CREATE TABLE students (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name text NOT NULL,
  telegram_id text,
  phone_number text,
  about text,
  email text
);

-- courses table: id, title, coach_id
CREATE TABLE courses (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  title text NOT NULL,
  coach_id integer REFERENCES coaches(id)
);

-- course_versions table: id, course_id, version_number, updated_at, is_active
CREATE TABLE course_versions (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  course_id integer REFERENCES courses(id),
  version_number integer NOT NULL,
  updated_at timestamptz DEFAULT now(),
  is_active boolean DEFAULT true
);

-- modules table: id, course_id, title
CREATE TABLE modules (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  course_id integer REFERENCES courses(id),
  title text
);

-- tasks table: id, course_id, title, deadline, module_id, timetocomplete
CREATE TABLE tasks (
  id bigint PRIMARY KEY,
  course_id integer NOT NULL REFERENCES courses(id),
  title text NOT NULL,
  deadline date NOT NULL,
  module_id integer NOT NULL REFERENCES modules(id),
  timetocomplete bigint
);

-- enrollments table: id, student_id, course_id, enrolled_at
CREATE TABLE enrollments (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  student_id integer REFERENCES students(id),
  course_id integer REFERENCES courses(id),
  enrolled_at timestamp DEFAULT CURRENT_TIMESTAMP
);

-- task_assignments table: id, student_id, task_id, status, updated_at, due_date
CREATE TABLE task_assignments (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  student_id integer REFERENCES students(id),
  task_id integer REFERENCES tasks(id),
  status task_status DEFAULT 'pending',
  updated_at timestamptz,
  due_date date NOT NULL
);

-- promises table: id, student_id, task_id, promise_datetime, due_date, checked, created_at
CREATE TABLE promises (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  student_id integer REFERENCES students(id),
  task_id integer REFERENCES tasks(id),
  promise_datetime timestamp,
  due_date date,
  checked boolean DEFAULT false,
  created_at timestamp DEFAULT now()
);

-- conversations table: id, student_id, role, message, timestamp
CREATE TABLE conversations (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  student_id bigint REFERENCES students(id),
  role text NOT NULL,
  message text NOT NULL,
  timestamp timestamptz DEFAULT now()
);

-- Enable Row Level Security
ALTER TABLE coaches ENABLE ROW LEVEL SECURITY;
ALTER TABLE students ENABLE ROW LEVEL SECURITY;
ALTER TABLE courses ENABLE ROW LEVEL SECURITY;
ALTER TABLE course_versions ENABLE ROW LEVEL SECURITY;
ALTER TABLE modules ENABLE ROW LEVEL SECURITY;
ALTER TABLE tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE enrollments ENABLE ROW LEVEL SECURITY;
ALTER TABLE task_assignments ENABLE ROW LEVEL SECURITY;
ALTER TABLE promises ENABLE ROW LEVEL SECURITY;
ALTER TABLE conversations ENABLE ROW LEVEL SECURITY;

-- Create policies for authenticated users
CREATE POLICY "Allow all operations for authenticated users" ON coaches FOR ALL TO authenticated USING (true);
CREATE POLICY "Allow all operations for authenticated users" ON students FOR ALL TO authenticated USING (true);
CREATE POLICY "Allow all operations for authenticated users" ON courses FOR ALL TO authenticated USING (true);
CREATE POLICY "Allow all operations for authenticated users" ON course_versions FOR ALL TO authenticated USING (true);
CREATE POLICY "Allow all operations for authenticated users" ON modules FOR ALL TO authenticated USING (true);
CREATE POLICY "Allow all operations for authenticated users" ON tasks FOR ALL TO authenticated USING (true);
CREATE POLICY "Allow all operations for authenticated users" ON enrollments FOR ALL TO authenticated USING (true);
CREATE POLICY "Allow all operations for authenticated users" ON task_assignments FOR ALL TO authenticated USING (true);
CREATE POLICY "Allow all operations for authenticated users" ON promises FOR ALL TO authenticated USING (true);
CREATE POLICY "Allow all operations for authenticated users" ON conversations FOR ALL TO authenticated USING (true);

-- Insert minimal sample data
INSERT INTO coaches (name, email, phone) VALUES
('Coach Maya', 'maya@supercoach.ai', '+1-555-0101'),
('Coach Alexander', 'alexander@supercoach.ai', '+1-555-0102');

INSERT INTO students (name, telegram_id, phone_number, about, email) VALUES
('Sarah Johnson', '@sarah_j', '+1-555-1001', 'Marketing professional', 'sarah.johnson@email.com'),
('Mike Chen', '@mike_c', '+1-555-1002', 'Small business owner', 'mike.chen@email.com'),
('Emma Rodriguez', '@emma_r', '+1-555-1003', 'Team lead', 'emma.rodriguez@email.com');

INSERT INTO courses (title, coach_id) VALUES
('Digital Marketing Mastery', 1),
('Leadership Excellence', 2);

INSERT INTO course_versions (course_id, version_number, is_active) VALUES
(1, 1, true),
(2, 1, true);

INSERT INTO modules (course_id, title) VALUES
(1, 'Introduction to Digital Marketing'),
(2, 'Leadership Fundamentals');

INSERT INTO tasks (id, course_id, title, deadline, module_id, timetocomplete) VALUES
(1, 1, 'What is Digital Marketing?', '2024-03-15', 1, 30),
(2, 2, 'What Makes a Great Leader?', '2024-03-18', 2, 40);

INSERT INTO enrollments (student_id, course_id, enrolled_at) VALUES
(1, 1, '2024-02-01T10:00:00Z'),
(2, 1, '2024-01-25T10:30:00Z'),
(3, 2, '2024-02-05T14:15:00Z');

INSERT INTO task_assignments (student_id, task_id, status, updated_at, due_date) VALUES
(1, 1, 'completed', '2024-02-01T10:00:00Z', '2024-03-15'),
(2, 1, 'pending', '2024-01-28T14:00:00Z', '2024-03-15'),
(3, 2, 'completed', '2024-02-10T09:00:00Z', '2024-03-18');

INSERT INTO promises (student_id, task_id, promise_datetime, due_date, checked, created_at) VALUES
(1, 1, '2024-03-14T10:00:00Z', '2024-03-15', false, '2024-02-01T10:00:00Z'),
(2, 1, '2024-03-14T14:00:00Z', '2024-03-15', false, '2024-01-28T14:00:00Z');

INSERT INTO conversations (student_id, role, message, timestamp) VALUES
(1, 'user', 'Hi Coach Maya! I need help with digital marketing.', '2024-02-25T10:00:00Z'),
(1, 'agent', 'Hi Sarah! I would be happy to help you.', '2024-02-25T10:15:00Z'),
(3, 'user', 'Coach Alexander, I completed the leadership module!', '2024-02-24T14:00:00Z'),
(3, 'agent', 'Excellent work, Emma! Your progress is great.', '2024-02-24T14:30:00Z');